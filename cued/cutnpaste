    printf("%d\n", PATH_MAX);
    exit(EXIT_SUCCESS);


2-channel signed 16-bit PCM sampled at 44 100 Hz.

Q channel: track/index nr., time since start-of-track, time since start-of-CD


The 98-frame sectors structure, in effect, is determined by the Q sub-channel - the subchannel starting with two "special" values of 14 channel bits (SYNC0 and SYNC1), followed by (for the Q channel) 96 bits of info describing the current audio sector (most of the time this gives track/index nr., time since start-of-track, time since start-of-CD, etc.) - as many of you here will know.


  typedef struct mmc_subchannel_s
  {
    uint8_t       reserved;
    uint8_t       audio_status;
    uint16_t      data_length; /**< Really ISO 9660 7.2.2 */
    uint8_t	  format;
    uint8_t	  address:	4;
    uint8_t	  control:	4;
    uint8_t	  track;
    uint8_t	  index;
    uint8_t       abs_addr[4];
    uint8_t       rel_addr[4];
  } cdio_mmc_subchannel_t;



  typedef struct cdio_subchannel_s 
  {
    uint8_t format;
    uint8_t audio_status;

    uint8_t address:	4;

    uint8_t control:	4;
    uint8_t track;
    uint8_t index;
    msf_t   abs_addr;
    msf_t   rel_addr;
  } cdio_subchannel_t;


  address appears to be a type field


question is...  address is what???
    4 bits...
        values 0 through 15

    specifies one of three different types of Q sub-channel data

  typedef enum {
    CDIO_MMC_READ_SUB_ST_INVALID   = 0x00, /**< audio status not supported */
    CDIO_MMC_READ_SUB_ST_PLAY      = 0x11, /**< audio play operation in 
                                              progress */
    CDIO_MMC_READ_SUB_ST_PAUSED    = 0x12, /**< audio play operation paused */
    CDIO_MMC_READ_SUB_ST_COMPLETED = 0x13, /**< audio play successfully 
                                              completed */
    CDIO_MMC_READ_SUB_ST_ERROR     = 0x14, /**< audio play stopped due to 
                                              error */
    CDIO_MMC_READ_SUB_ST_NO_STATUS = 0x15, /**< no current audio status to
                                              return */
  } cdio_mmc_read_sub_state_t;

format should be CDIO_CDROM_MSF???

CDIO_MMC_GPCMD_READ_SUBCHANNEL = 0x42  (10 bytes)

    mmc_audio_read_subchannel uses CDIO_SUBCHANNEL_CURRENT_POSITION

        what is CDIO_SUBCHANNEL_SUBQ_DATA?



rel_addr is track address?
abs_addr is cd address?

  /*! 
    track flags
    Q Sub-channel Control Field (4.2.3.3)
  */
  typedef enum {
    CDIO_TRACK_FLAG_NONE = 		 0x00,	/**< no flags set */
    CDIO_TRACK_FLAG_PRE_EMPHASIS =	 0x01,	/**< audio track recorded with
                                                   pre-emphasis */
    CDIO_TRACK_FLAG_COPY_PERMITTED =	 0x02,	/**< digital copy permitted */
    CDIO_TRACK_FLAG_DATA =		 0x04,	/**< data track */
    CDIO_TRACK_FLAG_FOUR_CHANNEL_AUDIO = 0x08,  /**< 4 audio channels */
  CDIO_TRACK_FLAG_SCMS =		 0x10	/**< SCMS (5.29.2.7) */


    p_subchannel->format       = mmc_subchannel.format;
    p_subchannel->audio_status = mmc_subchannel.audio_status;
    p_subchannel->address      = mmc_subchannel.address;
    p_subchannel->control      = mmc_subchannel.control;
    p_subchannel->track        = mmc_subchannel.track;
    p_subchannel->index        = mmc_subchannel.index;
    p_subchannel->abs_addr.m   = cdio_to_bcd8(mmc_subchannel.abs_addr[1]);
    p_subchannel->abs_addr.s   = cdio_to_bcd8(mmc_subchannel.abs_addr[2]);
    p_subchannel->abs_addr.f   = cdio_to_bcd8(mmc_subchannel.abs_addr[3]);
    p_subchannel->rel_addr.m   = cdio_to_bcd8(mmc_subchannel.rel_addr[1]);
    p_subchannel->rel_addr.s   = cdio_to_bcd8(mmc_subchannel.rel_addr[2]);
    p_subchannel->rel_addr.f   = cdio_to_bcd8(mmc_subchannel.rel_addr[3]);


CONTROL - 0  2 Audio Channels without pre-emphasis
        - 1  2 Audio Channels with pre-emphasis
         -8  4 Audio Channels without pre-emphasis
         -9  4 Audio Channels with pre-emphasis
         -4  Data track, recorded uninterrupted
         -5  Data track, recorded increment
         -12 reserved

ADR      - 1 MODE 1 Q
         - 2 MODE 2 Q
         - 3 MODE 3 Q




  cmd[0] = 0xbe;  // READ CD
  cmd[1] = 0;
  cmd[6] = 0;
  cmd[7] = 0;
  cmd[8] = 1; // transfer length: 1
  cmd[9] = 0xf8;
  cmd[10] = 0;
  cmd[11] = 0;

  blockLen = AUDIO_BLOCK_LEN;

  switch (subChanMode) {
  case 1: // PQ
    blockLen += PQ_SUBCHANNEL_LEN;
    cmd[10] = 0x02;
    if (len > 300)
      len = 300; /* we have to check many sub-channels here to determine the
		  * data mode (BCD or HEX)
		  */
    break;

  case 2: // PW_RAW
    cmd[10] = 0x01;
    blockLen +=  PW_SUBCHANNEL_LEN;
    if (len > 10)
      len = 10;
    break;

  case 3: // RW_COOKED
    cmd[10] = 0x04;
    blockLen +=  PW_SUBCHANNEL_LEN;
    if (len > 10)
      len = 10;
    break;
  }

  while (len > 0) {
    cmd[2] = lba >> 24;
    cmd[3] = lba >> 16;
    cmd[4] = lba >> 8;
    cmd[5] = lba;
    
    if ((ret = sendCmd(cmd, 12, NULL, 0, transferBuffer_, blockLen, 0)) == 0) {



#define cued_abort_fix_me cued_abort

#if 0
            switch (i) {
                case CDTEXT_ARRANGER:
                case CDTEXT_COMPOSER:
                case CDTEXT_MESSAGE:
                case CDTEXT_PERFORMER:
                case CDTEXT_SONGWRITER:
                case CDTEXT_TITLE:
                case CDTEXT_UPC_EAN:
                case CDTEXT_ISRC:
                case CDTEXT_DISCID:
                    quoted = 1;
                    break;

                case CDTEXT_GENRE:
                case CDTEXT_SIZE_INFO:
                case CDTEXT_TOC_INFO:
                case CDTEXT_TOC_INFO2:
                    quoted = 0;
                    break;

                default:
                    cuedAbort("unknown CD-TEXT field number %02d", i);
                    break;
            }
#endif


#if 0

    PIT(const char, what);

    switch (ec) {

    case DRIVER_OP_SUCCESS:
        return;
        break;

    case DRIVER_OP_ERROR:
        what = "unknown";
        break;

    case DRIVER_OP_UNSUPPORTED:
        what = "driver does not support";
        break;

    case DRIVER_OP_UNINIT:
        what = "driver uninitialized";
        break;

    case DRIVER_OP_NOT_PERMITTED:
        what = "not permitted (check permissions)";
        break;

    case DRIVER_OP_BAD_PARAMETER:
        what = "bad parameter (internal error?)";
        break;

    case DRIVER_OP_BAD_POINTER:
        what = "bad pointer (internal error?)";
        break;

    case DRIVER_OP_NO_DRIVER:
        what = "unsupported operating system";
        break;

    default:
        what = "unidentified error (newer version of libcdio?)";
        break;
    }

#else

"\nusage:  "




0x0000,0x8005,0x800f,0x000a,0x801b,0x001e,0x0014,0x8011,
0x8033,0x0036,0x003c,0x8039,0x0028,0x802d,0x8027,0x0022,
0x8063,0x0066,0x006c,0x8069,0x0078,0x807d,0x8077,0x0072,
0x0050,0x8055,0x805f,0x005a,0x804b,0x004e,0x0044,0x8041,
0x80c3,0x00c6,0x00cc,0x80c9,0x00d8,0x80dd,0x80d7,0x00d2,
0x00f0,0x80f5,0x80ff,0x00fa,0x80eb,0x00ee,0x00e4,0x80e1,
0x00a0,0x80a5,0x80af,0x00aa,0x80bb,0x00be,0x00b4,0x80b1,
0x8093,0x0096,0x009c,0x8099,0x0088,0x808d,0x8087,0x0082,
0x8183,0x0186,0x018c,0x8189,0x0198,0x819d,0x8197,0x0192,
0x01b0,0x81b5,0x81bf,0x01ba,0x81ab,0x01ae,0x01a4,0x81a1,
0x01e0,0x81e5,0x81ef,0x01ea,0x81fb,0x01fe,0x01f4,0x81f1,
0x81d3,0x01d6,0x01dc,0x81d9,0x01c8,0x81cd,0x81c7,0x01c2,
0x0140,0x8145,0x814f,0x014a,0x815b,0x015e,0x0154,0x8151,
0x8173,0x0176,0x017c,0x8179,0x0168,0x816d,0x8167,0x0162,
0x8123,0x0126,0x012c,0x8129,0x0138,0x813d,0x8137,0x0132,
0x0110,0x8115,0x811f,0x011a,0x810b,0x010e,0x0104,0x8101,
0x8303,0x0306,0x030c,0x8309,0x0318,0x831d,0x8317,0x0312,
0x0330,0x8335,0x833f,0x033a,0x832b,0x032e,0x0324,0x8321,
0x0360,0x8365,0x836f,0x036a,0x837b,0x037e,0x0374,0x8371,
0x8353,0x0356,0x035c,0x8359,0x0348,0x834d,0x8347,0x0342,
0x03c0,0x83c5,0x83cf,0x03ca,0x83db,0x03de,0x03d4,0x83d1,
0x83f3,0x03f6,0x03fc,0x83f9,0x03e8,0x83ed,0x83e7,0x03e2,
0x83a3,0x03a6,0x03ac,0x83a9,0x03b8,0x83bd,0x83b7,0x03b2,
0x0390,0x8395,0x839f,0x039a,0x838b,0x038e,0x0384,0x8381,
0x0280,0x8285,0x828f,0x028a,0x829b,0x029e,0x0294,0x8291,
0x82b3,0x02b6,0x02bc,0x82b9,0x02a8,0x82ad,0x82a7,0x02a2,
0x82e3,0x02e6,0x02ec,0x82e9,0x02f8,0x82fd,0x82f7,0x02f2,
0x02d0,0x82d5,0x82df,0x02da,0x82cb,0x02ce,0x02c4,0x82c1,
0x8243,0x0246,0x024c,0x8249,0x0258,0x825d,0x8257,0x0252,
0x0270,0x8275,0x827f,0x027a,0x826b,0x026e,0x0264,0x8261,
0x0220,0x8225,0x822f,0x022a,0x823b,0x023e,0x0234,0x8231,
0x8213,0x0216,0x021c,0x8219,0x0208,0x820d,0x8207,0x0202,

    return ((old_crc << 8) ^ new_byte) ^ crc_table[ (old_crc >> 8) & 0xFF ];



ISRC
    9 bytes total


    4 bytes
        6 bits x 5 = 30 bits

        2 bits unused

        NABBLE macro


    4 bytes  (nibble index?  9th nibble, so index is 8?)

        32 bits, 28 bits + 4 unused bits, (4 bytes) (I6-I12)

            i6 is data[5]
            i7 is data[5]
            i8 is data[6]
            i9 is data[6]
            i10 is data[7]
            i11 is data[7]
            i12 is data[8]

            zero field is 4 bits    data[8]

    1 byte
        AFRAME is 1 byte        data[9]


    // this is ugly, but it was too easy;
    // of course it probably only optimizes on a VAX processor
    //
    while (len--) {
        crc = crc_ccitt(crc, *data++);
    }


        if (prc != curr) {
            switch (prc) {

                case -1:
                    cdio_error("paranoia returned \"%d\" during seek; skipping track %02d", prc, track);
                    //continue;
                    return;

                case 0:
                    if (track <= startTrack) {
                        break;
                    }
                    // explicit use of fall through (i.e. no break)

                default:
                    cued_abort("paranoia returned \"%d\" during seek to \"%d\" for track %02d (internal error)", prc, curr, track);
                    break;
            }
        }



#if 0
            // test overread
            if (track == stopTrack) {

                // test overread
                ++last;                
            }
#endif

//      option for creating toc file with wave file names instead of image file name?
//          depends on (-q)


#undef CUED_DEBUG_GAPS

#ifdef CUED_DEBUG_GAPS
        msf_t lsntomsf;
#endif

#ifdef CUED_DEBUG_GAPS
        
        cued_lsn_to_msf(cdio_get_track_lsn(cdObj, track), &lsntomsf);

        if (cdio_get_track_sec_count(cdObj, track) != cdio_get_track_last_lsn(cdObj, track) - cdio_get_track_lsn(cdObj, track) + 1) {
            cued_abort("sector count does NOT equal difference between track indices");
        }

        printf("track %02d, start lsn %06d, last lsn %06d, lsn diff %06d, sector count %06d, msf %06d, msf %s, lsn to msf %s\n"
            , track
            , cdio_get_track_lsn(cdObj, track)
            , cdio_get_track_last_lsn(cdObj, track)
            , cdio_get_track_last_lsn(cdObj, track) - cdio_get_track_lsn(cdObj, track) + 1
            , cdio_get_track_sec_count(cdObj, track)
            , cdio_msf_to_lsn(&msf)
            , msfStr
            , cdio_msf_to_str(&lsntomsf)
            );
#endif



            wordsToWrite = CD_FRAMEWORDS;

            // N.B. firstSector == lastSector is not possible if offsetWords is non-zero
            //
            if (firstSector == currSector) {
                if (offsetWords < 0) {
                    pbuf += CD_FRAMEWORDS - offsetWords;
                    wordsToWrite = offsetWords;
                } else if (offsetWords > 0) {
                    pbuf += offsetWords;
                    wordsToWrite -= offsetWords;
                }
            } else if (lastSector == currSector) {
                if (offsetWords < 0) {
                    wordsToWrite -= FRAMEWORDS - offsetWords;
                } else if (offsetWords > 0) {
                    wordsToWrite = offsetWords;    
                }
            }

#define VECTOR(type, name, bytes) type name[ bytes / sizeof(type) ]

//      test offset correction
//
//          +42 equals eac except eac's last track has 5 random samples (eac +12 mojo drive)
//          +768 equals eac (eac +738 HP DVD drive)
//          -750 worked
//          -42 worked



    PIT(const char, extension);

    switch (cdio_get_driver_id(cdObj)) {

        case DRIVER_BINCUE:
        case DRIVER_CDRDAO:
            extension = "bin";
            break;

        case DRIVER_NRG:
            extension = "nrg";
            break;

        case DRIVER_LINUX:
        case DRIVER_SOLARIS:
        case DRIVER_OSX:
        case DRIVER_WIN32:
        case DRIVER_AIX:
        case DRIVER_BSDI:
        case DRIVER_FREEBSD:
        case DRIVER_DEVICE:
            extension = "dev";
            break;

        case DRIVER_UNKNOWN:
            extension = "unknown driver";
            break;

        default:
            extension = "unidentified";
            cdio_warn("unidentified driver with id %02d (newer version of libcdio?)",
                cdio_get_driver_id(cdObj));
            break;
    }




        switch (option) {

            case 0:
                // indicates a long option was parsed
                break;

            case 'c':
                cueFileName = optarg;
                break;

            case 'd':
                if (SUBSTREQ("de", optarg) || SUBSTREQ("db", optarg) || SUBSTREQ("max", optarg)) {
                    cdio_loglevel_default = CDIO_LOG_DEBUG;
                } else if (SUBSTREQ("info", optarg) || SUBSTREQ("nfo", optarg)) {
                    cdio_loglevel_default = CDIO_LOG_INFO;
                } else if (SUBSTREQ("war", optarg)) {
                    cdio_loglevel_default = CDIO_LOG_WARN;
                } else if (SUBSTREQ("err", optarg)) {
                    cdio_loglevel_default = CDIO_LOG_ERROR;
                } else if (SUBSTREQ("ass", optarg) || SUBSTREQ("cr", optarg) || SUBSTREQ("min", optarg)) {
                    cdio_loglevel_default = CDIO_LOG_ASSERT;
                } else if (strtol2(optarg, NULL, 10, &sst)) {
                    cdio2_abort("invalid debug level of \"%s\" specified", optarg);
                } else {
                    cdio_loglevel_default = (cdio_log_level_t) sst;
                }
                break;

            case 'f':
                soundFileFormat = SF_FORMAT_FLAC;
                break;

            case 'i':
                getIndices = 1;
                break;

            case 'o':
                if (strtol2(optarg, NULL, 10, &sst)) {
                    cdio2_abort("invalid offset correction of \"%s\" specified", optarg);
                } else {
                    offsetWords = (int) ((sst - 30) * 2);
                }
                break;

            case 'p':
                useParanoia = 1;            
                break;

            case 'q':
                qSubChannelFileName = optarg;
                break;

            case 'r':
                if (strtol2(optarg, NULL, 10, &sst)) {
                    cdio2_abort("invalid number of retries of \"%s\" specified", optarg);
                } else {
                    retries = (int) sst;
                }
                break;

            case 's':
                if (strtol2(optarg, NULL, 10, &sst)) {
                    cdio2_abort("invalid speed of \"%s\" specified", optarg);
                } else {
                    // N.B. a speed of zero is effectively ignored
                    speed = (int) sst;
                }
                break;

            case 'x':
                fileNamePattern = optarg;
                break;

            case '?':
                cdio_log(CDIO_LOG_ASSERT, "unknown option \"%c\" specified", optopt);
                usage(exeName);
                break;

            default:
                cdio2_unix_error("getopt", "", 1);
                break;
        }

        if (option >= CDDB2_OPT_MIN && option <= CDDB2_OPT_MAX) {
            cddb2_parse_opt((cddb2_opt_t) option);
            continue;
        }


        if (true != cdio2_get_track_msf(cdObj, track, &msf)) {
            cdio2_abort("failed to get index for track %02d", track);
        }


#ifdef DEBUG_READ_CORRECTION
        if (track != 1 && track != 2) {
            continue;
        }
#endif


printf("firstRipTrack is %d; lastRipTrack is %d; first track is %d; last track is %d\n", firstRipTrack, lastRipTrack, firstTrack, lastTrack);


    int i, j;

    for (i = 0;  i < CDIO_CD_MAX_TRACKS + 1;  ++i) {
        for (j = 0;  j < CUED_MAX_INDICES;  ++j) {
            rip_indices[i][j] = CDIO_INVALID_LSN;
        }
    }


                if (getIndices) {
                    paranoiaCtlObj->read_audio = cued_read_paranoid;
                }


extern char  rip_mcn[ MCN_LEN + 1 ];
extern char  rip_isrc   [ CDIO_CD_MAX_TRACKS + 1 ][ ISRC_LEN + 1 ];
extern lba_t rip_indices[ CDIO_CD_MAX_TRACKS + 1 ][ CUED_MAX_INDICES ];
extern int   rip_silent_pregap;
extern int   rip_noisy_pregap;
extern int   rip_year;




    if (argc - 1 != optind) {
        if (argc - 1 > optind) {
            cdio_log(CDIO_LOG_ASSERT, "more than one device specified");
        } else {
            cdio_log(CDIO_LOG_ASSERT, "no device specified");
        }
        usage(exeName);
    }
